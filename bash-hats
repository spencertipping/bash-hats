#!/bin/bash
# Source this in your .bashrc to enable bash hats.

# hat context functions
hat_current=

function hat_use {
  [[ $1 != $hat_current ]] || return 0

  if [[ -n "$1" && ! -e "$1/.bash-hat" ]]; then
    echo "hat use $1 failed; no hatfile in $1 (run 'hat init' in $1)"
    return 1
  fi

  # Hats don't keep in-memory state, so no need to uninitialize any prior hat.
  # All we need to do is apply the new one, which entails loading command
  # history and setting hat_current.
  if [[ -z "$1" ]]; then
    echo "hat: dissociated from $hat_current"
    hat_current=
  else
    # Make the specified path absolute
    hat_current=$(builtin cd "$1"; pwd)

    history -r <(grep "^$USER\t$HOSTNAME" "$hat_current/.bash-hat" \
                 | cut -f3- \
                 | uniq)
    for cmd in $(cut -f3- "$hat_current/.bash-hat" \
                   | awk '{print $1}' \
                   | grep . \
                   | sort \
                   | uniq); do
      hat_enable_completion "$cmd"
    done
    echo "hat: using $hat_current"
  fi
}

function hat_observe {
  [[ -n $hat_current ]] || return 0
  local cmdline=$(history 1 | sed -r '1s/^\s*[0-9]+\s*//')
  if [[ -n $cmdline ]]; then
    # Don't append a duplicate. This happens sometimes because the DEBUG trap
    # is more invasive than we really need.
    local last_line=$(tail -n1 "$hat_current/.bash-hat")
    local new_line=$(printf "%s\t%s\t%s\n" \
                            "$USER" \
                            "$HOSTNAME" \
                            "${cmdline//$'\n'/ }")
    [[ "$new_line" == "$last_line" ]] \
      || echo "$new_line" >> "$hat_current/.bash-hat"
    hat_enable_completion "$(awk '{print $1}' <<<"$cmdline")"
  fi
}

# Historical completion
function hat_enable_completion {
  # Preserve any existing completion for the command. This matters because we
  # don't want history to make other (possibly more useful) completions
  # inaccessible.
  if ! grep '[^-A-Za-z0-9_]' <<<"$1" > /dev/null; then
    local varname=hat_original_complete_for_$1
    if [[ ! -n ${!varname} ]]; then
      printf -v $varname %s "$(complete -p "$1" 2>/dev/null \
                               | sed -r 's/^\s*complete\s*//')"
      complete -F hat_complete $1
    fi
  fi
}

function hat_contextual_completions {
  # Locate lines for this command in the hat log, then print matches against
  # the prior word.
  cut -f3- "$hat_current/.bash-hat" \
    | perl -ne 'BEGIN { ($cmd, $part, $prior) = @ARGV; @ARGV = () }
                sub sw { substr($_[0], 0, length $_[1]) eq $_[1] }
                chomp;
                if (sw $_, $cmd) {
                  my @words = /((?:\S|\\.)+)/g;
                  for (my $i = 0; $i < $#words; ++$i) {
                    print join(" ", @words[$i .. $#words]), "\n"
                      if length($part) && sw $words[$i], $part;
                    print join(" ", @words[$i + 1 .. $#words]), "\n"
                      if $words[$i] eq $prior && sw $words[$i + 1], $part;
                  }
                }' "$@" \
    | sort \
    | uniq
}

function hat_complete {
  local old_ifs=$IFS
  IFS=$'\n'
  local compvar=hat_original_complete_for_$1
  COMPREPLY=( $(eval "compgen ${!compvar} 2>/dev/null") )
  [[ -n "$hat_current" ]] && COMPREPLY+=( $(hat_contextual_completions "$@") )
  IFS=$old_ifs
  :
}

# Main function
function hat {
  case $1 in
    dissoc)
      hat_use ''
      ;;

    init)
      touch .bash-hat
      hat_use .
      ;;

    ls)
      if [[ -z "$hat_current" ]]; then
        echo 'hat ls requires an active hat'
        return 1
      fi
      cut -f3- "$hat_current/.bash-hat" | egrep "$2"
      ;;

    status)
      if [[ -n "$hat_current" ]]; then
        echo "using hat $hat_current"
      else
        echo "no current hat"
      fi
      ;;

    use)
      hat_use "$2"
      ;;

    \?)
      hat ls "> $*"
      ;;

    *)
      echo "usage: hat command args..."
      echo "commands:"
      echo "  dissoc    - stop using current hat"
      echo "  init      - create a hat for this directory"
      echo "  ls <pat>  - search for <pat> in command history"
      echo "  status    - show current hat"
      echo "  use <dir> - use hat from another directory"
      echo "  ? file    - same as 'hat ls \"> file\"'"
      echo
      ;;
  esac
}

trap hat_observe DEBUG

# cd overloading (to detect hatfiles)
if ! declare -f hat_original_cd > /dev/null; then
  if hat_original_cd_source=$(declare -f cd); then
    eval "hat_original_cd ${hat_original_cd_source#cd }"
  else
    function hat_original_cd { builtin cd -- "$@"; }
  fi
fi

function cd {
  hat_original_cd "$@" || return $?

  # Look for a bash-hat file in this or any parent directory.
  local dir=$PWD
  while [[ "$dir" != / ]]; do
    if [[ -r "$dir/.bash-hat" ]]; then
      hat_use "$dir"
      return 0
    fi
    dir=$(dirname "$dir")
  done

  # If we didn't find a hat, unset the current one so we don't keep recording
  # history.
  [[ "$dir" == / ]] && hat_use ''
}
